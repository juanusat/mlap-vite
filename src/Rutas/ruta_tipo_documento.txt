# document_type_routes.py

from flask import Blueprint, jsonify, request, abort, g, url_for, redirect
from .document_type_controller import (
    get_all_document_types,
    get_document_type_by_id,
    create_document_type,
    update_document_type,
    delete_document_type,
    get_all_active_document_types
)

# Creamos el blueprint para los tipos de documentos
document_type_bp = Blueprint('document_type', __name__)

@document_type_bp.route('/', methods=['GET'])
def list_document_types():
    """
    Ruta para obtener todos los tipos de documentos.
    Requiere que el usuario esté autenticado.
    """
    #if not getattr(g, 'user_id', None):
    #    return redirect(url_for('inicio')) # Asume que 'inicio' es una ruta de login
    
    document_types = get_all_document_types()
    return jsonify(document_types), 200

@document_type_bp.route('/active', methods=['GET'])
def list_active_document_types():
    """
    Ruta para obtener solo los tipos de documentos activos.
    """
    document_types = get_all_active_document_types()
    return jsonify(document_types), 200

@document_type_bp.route('/<int:doc_id>', methods=['GET'])
def get_single_document_type(doc_id):
    """
    Ruta para obtener un tipo de documento por su ID.
    """
    document_type = get_document_type_by_id(doc_id)
    if not document_type:
        abort(404, description="Tipo de documento no encontrado")
    return jsonify(document_type), 200

@document_type_bp.route('/', methods=['POST'])
def add_document_type():
    """
    Ruta para crear un nuevo tipo de documento.
    Requiere permisos de administrador.
    """
    # Aquí iría la validación de permisos, similar a 'es_admin()'
    #if not es_admin():
    #    abort(403, "No autorizado")
    
    data = request.get_json()
    code = data.get("code")
    name = data.get("name")
    active = data.get("active", True)
    
    if not code or not name:
        abort(400, "Código y nombre son campos obligatorios.")
        
    try:
        new_doc_type = create_document_type(code, name, active)
        return jsonify(new_doc_type), 201
    except Exception as e:
        abort(500, description=str(e))

@document_type_bp.route('/<int:doc_id>', methods=['PUT'])
def edit_document_type(doc_id):
    """
    Ruta para actualizar un tipo de documento por su ID.
    Requiere permisos de administrador.
    """
    #if not es_admin():
    #    abort(403, "No autorizado")
    
    data = request.get_json()
    name = data.get("name")
    active = data.get("active")
    
    try:
        updated_doc_type = update_document_type(doc_id, name, active)
        if not updated_doc_type:
            abort(404, description="Tipo de documento no encontrado")
        return jsonify(updated_doc_type), 200
    except Exception as e:
        abort(500, description=str(e))

@document_type_bp.route('/<int:doc_id>', methods=['DELETE'])
def remove_document_type(doc_id):
    """
    Ruta para eliminar un tipo de documento por su ID.
    Requiere permisos de administrador.
    """
    #if not es_admin():
    #    abort(403, "No autorizado")
    
    try:
        deleted = delete_document_type(doc_id)
        if not deleted:
            abort(404, description="Tipo de documento no encontrado")
        return jsonify({"message": "Tipo de documento eliminado exitosamente"}), 200
    except Exception as e:
        abort(500, description=str(e))

----------------------------------------------------------------------------------------------------------

def get_all_document_types():
    """Obtiene todos los tipos de documentos de la BD."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM document_type ORDER BY id;")
            document_types = cursor.fetchall()
            return [dict(row) for row in document_types]
    finally:
        conn.close()

def get_all_active_document_types():
    """Obtiene todos los tipos de documentos activos de la BD."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM document_type WHERE active = TRUE ORDER BY name;")
            document_types = cursor.fetchall()
            return [dict(row) for row in document_types]
    finally:
        conn.close()
        
def get_document_type_by_id(doc_id):
    """Obtiene un tipo de documento por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM document_type WHERE id = %s;", (doc_id,))
            document_type = cursor.fetchone()
            return dict(document_type) if document_type else None
    finally:
        conn.close()

def create_document_type(code, name, active):
    """Crea un nuevo tipo de documento."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO document_type (code, name, active)
                VALUES (%s, %s, %s)
                RETURNING id, code, name, active;
                """,
                (code, name, active)
            )
            new_doc_type = cursor.fetchone()
            conn.commit()
            return dict(new_doc_type)
    finally:
        conn.close()

def update_document_type(doc_id, name, active):
    """Actualiza los datos de un tipo de documento."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            query = "UPDATE document_type SET "
            params = []
            
            if name is not None:
                query += "name = %s, "
                params.append(name)
            if active is not None:
                query += "active = %s, "
                params.append(active)
            
            if not params:
                return get_document_type_by_id(doc_id) # No hay nada que actualizar
                
            query = query.rstrip(', ') + " WHERE id = %s RETURNING *;"
            params.append(doc_id)
            
            cursor.execute(query, tuple(params))
            updated_doc_type = cursor.fetchone()
            conn.commit()
            return dict(updated_doc_type) if updated_doc_type else None
    finally:
        conn.close()

def delete_document_type(doc_id):
    """Elimina un tipo de documento por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM document_type WHERE id = %s;", (doc_id,))
            deleted_rows = cursor.rowcount
            conn.commit()
            return deleted_rows > 0
    finally:
        conn.close()