from .parish_controller import (
    get_all_parishes,
    get_parish_by_id,
    create_parish,
    update_parish,
    deactivate_parish
)

parish_bp = Blueprint('parish', __name__)

@parish_bp.route('/', methods=['GET'])
def list_parishes():
    """
    Ruta para obtener todas las parroquias.
    """
    # Se podría añadir lógica de autenticación y autorización aquí
    parishes = get_all_parishes()
    return jsonify(parishes), 200

@parish_bp.route('/<int:parish_id>', methods=['GET'])
def get_single_parish(parish_id):
    """
    Ruta para obtener una parroquia por su ID.
    """
    parish = get_parish_by_id(parish_id)
    if not parish:
        abort(404, description="Parroquia no encontrada")
    return jsonify(parish), 200

@parish_bp.route('/', methods=['POST'])
def add_parish():
    """
    Ruta para crear una nueva parroquia.
    Requiere que el usuario sea un superadministrador.
    """
    # if not es_super_admin():
    #     abort(403, "No autorizado. Requiere permisos de superadministrador.")
    
    data = request.get_json()
    required_fields = ['name', 'address', 'email', 'phone', 'admin_user_id']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios.")
    
    try:
        new_parish = create_parish(
            name=data['name'],
            address=data['address'],
            email=data['email'],
            phone=data['phone'],
            admin_user_id=data['admin_user_id'],
            primary_color=data.get('primary_color'),
            secondary_color=data.get('secondary_color'),
            profile_photo=data.get('profile_photo'),
            cover_photo=data.get('cover_photo')
        )
        return jsonify(new_parish), 201
    except Exception as e:
        abort(500, description=str(e))

@parish_bp.route('/<int:parish_id>', methods=['PUT'])
def edit_parish(parish_id):
    """
    Ruta para actualizar los datos de una parroquia.
    Requiere permisos de administrador de la parroquia.
    """
    # if not es_admin_de_parroquia(parish_id):
    #     abort(403, "No autorizado para editar esta parroquia.")
        
    data = request.get_json()
    
    try:
        updated_parish = update_parish(
            parish_id=parish_id,
            name=data.get('name'),
            address=data.get('address'),
            email=data.get('email'),
            phone=data.get('phone'),
            primary_color=data.get('primary_color'),
            secondary_color=data.get('secondary_color'),
            profile_photo=data.get('profile_photo'),
            cover_photo=data.get('cover_photo'),
            active=data.get('active')
        )
        if not updated_parish:
            abort(404, description="Parroquia no encontrada")
        return jsonify(updated_parish), 200
    except Exception as e:
        abort(500, description=str(e))

@parish_bp.route('/<int:parish_id>/deactivate', methods=['PUT'])
def deactivate_parish_route(parish_id):
    """
    Ruta para desactivar una parroquia (soft delete).
    Requiere permisos de superadministrador.
    """
    # if not es_super_admin():
    #     abort(403, "No autorizado. Requiere permisos de superadministrador.")

    try:
        deactivated_parish = deactivate_parish(parish_id)
        if not deactivated_parish:
            abort(404, description="Parroquia no encontrada")
        return jsonify(deactivated_parish), 200
    except Exception as e:
        abort(500, description=str(e)) 

---------------------------------------------------------------------------------------------------- 

from database import get_db_connection

def get_all_parishes():
    """Obtiene todas las parroquias de la BD."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM parish ORDER BY name;")
            parishes = cursor.fetchall()
            return [dict(row) for row in parishes]
    finally:
        conn.close()

def get_parish_by_id(parish_id):
    """Obtiene una parroquia por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM parish WHERE id = %s;", (parish_id,))
            parish = cursor.fetchone()
            return dict(parish) if parish else None
    finally:
        conn.close()

def create_parish(name, address, email, phone, admin_user_id, primary_color=None, secondary_color=None, profile_photo=None, cover_photo=None):
    """Crea una nueva parroquia."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO parish (name, address, email, phone, admin_user_id, primary_color, secondary_color, profile_photo, cover_photo)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING *;
                """,
                (name, address, email, phone, admin_user_id, primary_color, secondary_color, profile_photo, cover_photo)
            )
            new_parish = cursor.fetchone()
            conn.commit()
            return dict(new_parish)
    finally:
        conn.close()

def update_parish(parish_id, name=None, address=None, email=None, phone=None, primary_color=None, secondary_color=None, profile_photo=None, cover_photo=None, active=None):
    """Actualiza los datos de una parroquia."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            fields = []
            params = []
            
            if name is not None:
                fields.append("name = %s")
                params.append(name)
            if address is not None:
                fields.append("address = %s")
                params.append(address)
            if email is not None:
                fields.append("email = %s")
                params.append(email)
            if phone is not None:
                fields.append("phone = %s")
                params.append(phone)
            if primary_color is not None:
                fields.append("primary_color = %s")
                params.append(primary_color)
            if secondary_color is not None:
                fields.append("secondary_color = %s")
                params.append(secondary_color)
            if profile_photo is not None:
                fields.append("profile_photo = %s")
                params.append(profile_photo)
            if cover_photo is not None:
                fields.append("cover_photo = %s")
                params.append(cover_photo)
            if active is not None:
                fields.append("active = %s")
                params.append(active)
            
            if not fields:
                return get_parish_by_id(parish_id)
                
            query = f"UPDATE parish SET {', '.join(fields)}, updated_at = %s WHERE id = %s RETURNING *;"
            params.append(datetime.now())
            params.append(parish_id)
            
            cursor.execute(query, tuple(params))
            updated_parish = cursor.fetchone()
            conn.commit()
            return dict(updated_parish) if updated_parish else None
    finally:
        conn.close()

def deactivate_parish(parish_id):
    """Desactiva una parroquia por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                "UPDATE parish SET active = FALSE, updated_at = %s WHERE id = %s RETURNING *;",
                (datetime.now(), parish_id)
            )
            deactivated_parish = cursor.fetchone()
            conn.commit()
            return dict(deactivated_parish) if deactivated_parish else None
    finally:
        conn.close() 

