from .general_schedule_controller import (
    get_schedules_by_parish,
    get_schedule_by_id,
    create_general_schedule,
    update_general_schedule,
    delete_general_schedule
)

general_schedule_bp = Blueprint('general_schedule', __name__)

@general_schedule_bp.route('/parish/<int:parish_id>', methods=['GET'])
def list_schedules_by_parish(parish_id):
    """
    Ruta para obtener todos los horarios generales de una parroquia.
    """
    # if not tiene_permiso('ver_horarios', parish_id):
    #     abort(403, "No autorizado.")
    schedules = get_schedules_by_parish(parish_id)
    return jsonify(schedules), 200

@general_schedule_bp.route('/<int:schedule_id>', methods=['GET'])
def get_single_schedule(schedule_id):
    """
    Ruta para obtener un horario general por su ID.
    """
    schedule = get_schedule_by_id(schedule_id)
    if not schedule:
        abort(404, description="Horario no encontrado.")
    return jsonify(schedule), 200

@general_schedule_bp.route('/', methods=['POST'])
def add_general_schedule():
    """
    Ruta para crear un nuevo horario general para una parroquia.
    """
    data = request.get_json()
    required_fields = ['parish_id', 'day_of_week', 'start_time', 'end_time']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: parish_id, day_of_week, start_time y end_time.")
    
    # if not es_admin_de_parroquia(data['parish_id']):
    #     abort(403, "No autorizado para agregar horarios a esta parroquia.")

    try:
        new_schedule = create_general_schedule(
            parish_id=data['parish_id'],
            day_of_week=data['day_of_week'],
            start_time=data['start_time'],
            end_time=data['end_time']
        )
        return jsonify(new_schedule), 201
    except Exception as e:
        abort(500, description=str(e))

@general_schedule_bp.route('/<int:schedule_id>', methods=['PUT'])
def edit_general_schedule(schedule_id):
    """
    Ruta para actualizar un horario general.
    """
    data = request.get_json()
    
    # if not tiene_permiso_de_editar_horario(schedule_id):
    #     abort(403, "No autorizado para editar este horario.")

    try:
        updated_schedule = update_general_schedule(
            schedule_id=schedule_id,
            day_of_week=data.get('day_of_week'),
            start_time=data.get('start_time'),
            end_time=data.get('end_time')
        )
        if not updated_schedule:
            abort(404, description="Horario no encontrado.")
        return jsonify(updated_schedule), 200
    except Exception as e:
        abort(500, description=str(e))

@general_schedule_bp.route('/<int:schedule_id>', methods=['DELETE'])
def remove_general_schedule(schedule_id):
    """
    Ruta para eliminar un horario general por su ID.
    """
    # if not tiene_permiso_de_eliminar_horario(schedule_id):
    #     abort(403, "No autorizado para eliminar este horario.")

    try:
        deleted = delete_general_schedule(schedule_id)
        if not deleted:
            abort(404, description="Horario no encontrado.")
        return jsonify({"message": "Horario eliminado exitosamente."}), 200
    except Exception as e:
        abort(500, description=str(e)) 

-------------------------------------------------------------------------------------- 

from database import get_db_connection

def get_schedules_by_parish(parish_id):
    """Obtiene todos los horarios generales de una parroquia."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM general_schedule WHERE parish_id = %s ORDER BY day_of_week, start_time;", (parish_id,))
            schedules = cursor.fetchall()
            return [dict(row) for row in schedules]
    finally:
        conn.close()

def get_schedule_by_id(schedule_id):
    """Obtiene un horario general por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM general_schedule WHERE id = %s;", (schedule_id,))
            schedule = cursor.fetchone()
            return dict(schedule) if schedule else None
    finally:
        conn.close()

def create_general_schedule(parish_id, day_of_week, start_time, end_time):
    """Crea un nuevo horario general."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO general_schedule (parish_id, day_of_week, start_time, end_time)
                VALUES (%s, %s, %s, %s)
                RETURNING *;
                """,
                (parish_id, day_of_week, start_time, end_time)
            )
            new_schedule = cursor.fetchone()
            conn.commit()
            return dict(new_schedule)
    finally:
        conn.close()

def update_general_schedule(schedule_id, day_of_week=None, start_time=None, end_time=None):
    """Actualiza los datos de un horario general."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            fields = []
            params = []

            if day_of_week is not None:
                fields.append("day_of_week = %s")
                params.append(day_of_week)
            if start_time is not None:
                fields.append("start_time = %s")
                params.append(start_time)
            if end_time is not None:
                fields.append("end_time = %s")
                params.append(end_time)
            
            if not fields:
                return get_schedule_by_id(schedule_id)
                
            query = f"UPDATE general_schedule SET {', '.join(fields)}, updated_at = %s WHERE id = %s RETURNING *;"
            params.append(datetime.now())
            params.append(schedule_id)
            
            cursor.execute(query, tuple(params))
            updated_schedule = cursor.fetchone()
            conn.commit()
            return dict(updated_schedule) if updated_schedule else None
    finally:
        conn.close()

def delete_general_schedule(schedule_id):
    """Elimina un horario general por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM general_schedule WHERE id = %s;", (schedule_id,))
            deleted_rows = cursor.rowcount
            conn.commit()
            return deleted_rows > 0
    finally:
        conn.close() 