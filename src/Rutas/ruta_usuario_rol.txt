from .user_role_controller import (
    get_roles_by_association,
    get_roles_by_user,
    assign_role_to_user,
    revoke_role_from_user,
    get_user_role_by_id
)

user_role_bp = Blueprint('user_role', __name__)

@user_role_bp.route('/<int:user_role_id>', methods=['GET'])
def get_single_user_role(user_role_id):
    """
    Ruta para obtener una asignación de rol por su ID.
    """
    user_role = get_user_role_by_id(user_role_id)
    if not user_role:
        abort(404, description="Asignación de rol no encontrada.")
    return jsonify(user_role), 200

@user_role_bp.route('/association/<int:association_id>', methods=['GET'])
def list_roles_by_association(association_id):
    """
    Ruta para obtener todos los roles asignados a una asociación específica.
    """
    # if not tiene_permiso('listar_roles_asociacion', association_id):
    #     abort(403, "No autorizado.")
    roles = get_roles_by_association(association_id)
    return jsonify(roles), 200

@user_role_bp.route('/user/<int:user_id>', methods=['GET'])
def list_roles_by_user(user_id):
    """
    Ruta para obtener todos los roles asignados a un usuario, a través de sus asociaciones.
    """
    # if not tiene_permiso('listar_roles_usuario', user_id):
    #     abort(403, "No autorizado.")
    roles = get_roles_by_user(user_id)
    return jsonify(roles), 200

@user_role_bp.route('/assign', methods=['POST'])
def assign_role():
    """
    Ruta para asignar un rol a un usuario en una asociación.
    """
    data = request.get_json()
    required_fields = ['association_id', 'role_id']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: association_id y role_id.")

    # if not es_admin_de_asociacion(data['association_id']):
    #     abort(403, "No autorizado para asignar roles en esta asociación.")
    
    try:
        new_assignment = assign_role_to_user(
            association_id=data['association_id'],
            role_id=data['role_id']
        )
        return jsonify(new_assignment), 201
    except Exception as e:
        abort(500, description=str(e))

@user_role_bp.route('/revoke', methods=['PUT'])
def revoke_role():
    """
    Ruta para revocar (anular) un rol de un usuario.
    """
    data = request.get_json()
    required_fields = ['association_id', 'role_id']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: association_id y role_id.")

    # if not es_admin_de_asociacion(data['association_id']):
    #     abort(403, "No autorizado para revocar roles en esta asociación.")

    try:
        revoked_assignment = revoke_role_from_user(
            association_id=data['association_id'],
            role_id=data['role_id']
        )
        if not revoked_assignment:
            abort(404, description="Asignación de rol no encontrada o ya revocada.")
        return jsonify(revoked_assignment), 200
    except Exception as e:
        abort(500, description=str(e)) 

------------------------------------------------------------------------------------------ 
from database import get_db_connection

def get_user_role_by_id(user_role_id):
    """Obtiene una asignación de rol por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM user_role WHERE id = %s;", (user_role_id,))
            user_role = cursor.fetchone()
            return dict(user_role) if user_role else None
    finally:
        conn.close()

def get_roles_by_association(association_id):
    """Obtiene todos los roles asignados a una asociación específica."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT 
                    ur.id, ur.association_id, ur.role_id, ur.assignment_date, ur.revocation_date,
                    r.name as role_name, r.description as role_description
                FROM 
                    user_role ur
                JOIN 
                    role r ON ur.role_id = r.id
                WHERE 
                    ur.association_id = %s
                ORDER BY 
                    ur.assignment_date DESC;
            """, (association_id,))
            roles = cursor.fetchall()
            return [dict(row) for row in roles]
    finally:
        conn.close()

def get_roles_by_user(user_id):
    """Obtiene todos los roles asignados a un usuario, a través de sus asociaciones."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT
                    ur.id, ur.association_id, ur.role_id, ur.assignment_date, ur.revocation_date,
                    r.name as role_name, r.description as role_description,
                    p.id as parish_id, p.name as parish_name
                FROM
                    user_role ur
                JOIN
                    association a ON ur.association_id = a.id
                JOIN
                    role r ON ur.role_id = r.id
                JOIN
                    parish p ON a.parish_id = p.id
                WHERE
                    a.user_id = %s
                ORDER BY
                    ur.assignment_date DESC;
            """, (user_id,))
            roles = cursor.fetchall()
            return [dict(row) for row in roles]
    finally:
        conn.close()

def assign_role_to_user(association_id, role_id):
    """Asigna un rol a un usuario en una asociación, si no existe una asignación activa."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            # Primero, verifica si ya existe una asignación activa para evitar duplicados
            cursor.execute(
                """
                SELECT id FROM user_role
                WHERE association_id = %s AND role_id = %s AND revocation_date IS NULL;
                """,
                (association_id, role_id)
            )
            existing_assignment = cursor.fetchone()
            if existing_assignment:
                raise Exception("Este rol ya está asignado activamente a esta asociación.")

            cursor.execute(
                """
                INSERT INTO user_role (association_id, role_id)
                VALUES (%s, %s)
                RETURNING *;
                """,
                (association_id, role_id)
            )
            new_assignment = cursor.fetchone()
            conn.commit()
            return dict(new_assignment)
    finally:
        conn.close()

def revoke_role_from_user(association_id, role_id):
    """Revoca un rol de un usuario (borrado lógico)."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                UPDATE user_role
                SET revocation_date = %s
                WHERE association_id = %s AND role_id = %s AND revocation_date IS NULL
                RETURNING *;
                """,
                (datetime.now().date(), association_id, role_id)
            )
            revoked_assignment = cursor.fetchone()
            conn.commit()
            return dict(revoked_assignment) if revoked_assignment else None
    finally:
        conn.close()
