from .reservation_controller import (
    get_all_reservations,
    get_reservations_by_user,
    get_reservations_by_event_variant,
    get_reservation_by_id,
    create_reservation,
    update_reservation,
    cancel_reservation
)

reservation_bp = Blueprint('reservation', __name__)

@reservation_bp.route('/', methods=['GET'])
def list_all_reservations():
    """
    Ruta para obtener todas las reservas.
    (Solo para superadministradores o administradores de parroquia)
    """
    # if not tiene_permiso_para_ver_reservas_globales():
    #     abort(403, "No autorizado.")
    reservations = get_all_reservations()
    return jsonify(reservations), 200

@reservation_bp.route('/user/<int:user_id>', methods=['GET'])
def list_reservations_by_user(user_id):
    """
    Ruta para obtener todas las reservas de un usuario específico.
    """
    # if not es_el_usuario_o_admin(user_id):
    #     abort(403, "No autorizado.")
    reservations = get_reservations_by_user(user_id)
    return jsonify(reservations), 200

@reservation_bp.route('/event_variant/<int:variant_id>', methods=['GET'])
def list_reservations_by_event_variant(variant_id):
    """
    Ruta para obtener todas las reservas para una variante de evento.
    """
    # if not tiene_permiso_de_ver_reservas_variante(variant_id):
    #     abort(403, "No autorizado.")
    reservations = get_reservations_by_event_variant(variant_id)
    return jsonify(reservations), 200

@reservation_bp.route('/<int:reservation_id>', methods=['GET'])
def get_single_reservation(reservation_id):
    """
    Ruta para obtener una reserva por su ID.
    """
    reservation = get_reservation_by_id(reservation_id)
    if not reservation:
        abort(404, description="Reserva no encontrada.")
    return jsonify(reservation), 200

@reservation_bp.route('/', methods=['POST'])
def add_reservation():
    """
    Ruta para crear una nueva reserva.
    """
    data = request.get_json()
    required_fields = ['user_id', 'event_variant_id', 'reservation_date', 'reservation_time', 'participants']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios.")
    
    # if not es_el_usuario(data['user_id']):
    #     abort(403, "No autorizado para hacer reservas para otro usuario.")

    try:
        new_reservation = create_reservation(
            user_id=data['user_id'],
            event_variant_id=data['event_variant_id'],
            reservation_date=data['reservation_date'],
            reservation_time=data['reservation_time'],
            participants=data['participants']
        )
        return jsonify(new_reservation), 201
    except Exception as e:
        abort(500, description=str(e))

@reservation_bp.route('/<int:reservation_id>', methods=['PUT'])
def edit_reservation(reservation_id):
    """
    Ruta para actualizar los datos de una reserva.
    """
    data = request.get_json()
    
    # if not es_el_propietario_o_admin_de_reserva(reservation_id):
    #     abort(403, "No autorizado para editar esta reserva.")
        
    try:
        updated_reservation = update_reservation(
            reservation_id=reservation_id,
            reservation_date=data.get('reservation_date'),
            reservation_time=data.get('reservation_time'),
            participants=data.get('participants')
        )
        if not updated_reservation:
            abort(404, description="Reserva no encontrada.")
        return jsonify(updated_reservation), 200
    except Exception as e:
        abort(500, description=str(e))

@reservation_bp.route('/<int:reservation_id>/cancel', methods=['PUT'])
def cancel_reservation_route(reservation_id):
    """
    Ruta para cancelar una reserva.
    """
    # if not es_el_propietario_o_admin_de_reserva(reservation_id):
    #     abort(403, "No autorizado para cancelar esta reserva.")

    try:
        canceled_reservation = cancel_reservation(reservation_id)
        if not canceled_reservation:
            abort(404, description="Reserva no encontrada o ya cancelada.")
        return jsonify(canceled_reservation), 200
    except Exception as e:
        abort(500, description=str(e)) 


------------------------------------------------------------------------------------------ 

from database import get_db_connection

def get_all_reservations():
    """Obtiene todas las reservas de la BD."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM reservation ORDER BY reservation_date DESC, reservation_time DESC;")
            reservations = cursor.fetchall()
            return [dict(row) for row in reservations]
    finally:
        conn.close()

def get_reservations_by_user(user_id):
    """Obtiene todas las reservas de un usuario específico."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM reservation WHERE user_id = %s ORDER BY reservation_date DESC, reservation_time DESC;", (user_id,))
            reservations = cursor.fetchall()
            return [dict(row) for row in reservations]
    finally:
        conn.close()

def get_reservations_by_event_variant(variant_id):
    """Obtiene todas las reservas para una variante de evento."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM reservation WHERE event_variant_id = %s ORDER BY reservation_date DESC, reservation_time DESC;", (variant_id,))
            reservations = cursor.fetchall()
            return [dict(row) for row in reservations]
    finally:
        conn.close()

def get_reservation_by_id(reservation_id):
    """Obtiene una reserva por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM reservation WHERE id = %s;", (reservation_id,))
            reservation = cursor.fetchone()
            return dict(reservation) if reservation else None
    finally:
        conn.close()

def create_reservation(user_id, event_variant_id, reservation_date, reservation_time, participants):
    """Crea una nueva reserva."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            # TODO: Añadir lógica de validación aquí para verificar la capacidad y horarios disponibles
            # (e.g., verificar que participants <= max_capacity de la variante)
            
            cursor.execute(
                """
                INSERT INTO reservation (user_id, event_variant_id, reservation_date, reservation_time, participants)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING *;
                """,
                (user_id, event_variant_id, reservation_date, reservation_time, participants)
            )
            new_reservation = cursor.fetchone()
            conn.commit()
            return dict(new_reservation)
    finally:
        conn.close()

def update_reservation(reservation_id, reservation_date=None, reservation_time=None, participants=None):
    """Actualiza los datos de una reserva."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            fields = []
            params = []
            
            if reservation_date is not None:
                fields.append("reservation_date = %s")
                params.append(reservation_date)
            if reservation_time is not None:
                fields.append("reservation_time = %s")
                params.append(reservation_time)
            if participants is not None:
                fields.append("participants = %s")
                params.append(participants)
            
            if not fields:
                return get_reservation_by_id(reservation_id)
                
            query = f"UPDATE reservation SET {', '.join(fields)}, updated_at = %s WHERE id = %s AND status = 'CONFIRMED' RETURNING *;"
            params.append(datetime.now())
            params.append(reservation_id)
            
            cursor.execute(query, tuple(params))
            updated_reservation = cursor.fetchone()
            conn.commit()
            return dict(updated_reservation) if updated_reservation else None
    finally:
        conn.close()

def cancel_reservation(reservation_id):
    """Cancela una reserva (actualizando el estado a 'CANCELED')."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                UPDATE reservation
                SET status = 'CANCELED', updated_at = %s
                WHERE id = %s AND status = 'CONFIRMED'
                RETURNING *;
                """,
                (datetime.now(), reservation_id)
            )
            canceled_reservation = cursor.fetchone()
            conn.commit()
            return dict(canceled_reservation) if canceled_reservation else None
    finally:
        conn.close() 

        