Aquí tienes el CRUD completo para la tabla BaseRequirement, que gestiona los requisitos que deben cumplir los usuarios para poder reservar ciertos eventos.

Rutas para BaseRequirement
Este archivo (base_requirement_routes.py) define los endpoints para la gestión de los requisitos base. Las rutas están anidadas bajo un event_variant_id para reflejar su dependencia.

Python

# base_requirement_routes.py

from flask import Blueprint, jsonify, request, abort
from .base_requirement_controller import (
    get_requirements_by_variant,
    get_requirement_by_id,
    create_base_requirement,
    update_base_requirement,
    delete_base_requirement
)

base_requirement_bp = Blueprint('base_requirement', __name__)

@base_requirement_bp.route('/variant/<int:variant_id>', methods=['GET'])
def list_requirements_by_variant(variant_id):
    """
    Ruta para obtener todos los requisitos de una variante de evento.
    """
    # if not tiene_permiso('ver_requisitos', variant_id):
    #     abort(403, "No autorizado.")
    requirements = get_requirements_by_variant(variant_id)
    return jsonify(requirements), 200

@base_requirement_bp.route('/<int:requirement_id>', methods=['GET'])
def get_single_requirement(requirement_id):
    """
    Ruta para obtener un requisito por su ID.
    """
    requirement = get_requirement_by_id(requirement_id)
    if not requirement:
        abort(404, description="Requisito no encontrado.")
    return jsonify(requirement), 200

@base_requirement_bp.route('/', methods=['POST'])
def add_base_requirement():
    """
    Ruta para crear un nuevo requisito base.
    """
    data = request.get_json()
    required_fields = ['event_variant_id', 'required_role_id']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: event_variant_id y required_role_id.")
    
    # if not es_admin_de_variante(data['event_variant_id']):
    #     abort(403, "No autorizado para agregar requisitos a esta variante.")

    try:
        new_requirement = create_base_requirement(
            event_variant_id=data['event_variant_id'],
            required_role_id=data['required_role_id']
        )
        return jsonify(new_requirement), 201
    except Exception as e:
        abort(500, description=str(e))

@base_requirement_bp.route('/<int:requirement_id>', methods=['PUT'])
def edit_base_requirement(requirement_id):
    """
    Ruta para actualizar un requisito base.
    """
    data = request.get_json()
    
    # if not tiene_permiso_de_editar_requisito(requirement_id):
    #     abort(403, "No autorizado para editar este requisito.")

    try:
        updated_requirement = update_base_requirement(
            requirement_id=requirement_id,
            required_role_id=data.get('required_role_id')
        )
        if not updated_requirement:
            abort(404, description="Requisito no encontrado.")
        return jsonify(updated_requirement), 200
    except Exception as e:
        abort(500, description=str(e))

@base_requirement_bp.route('/<int:requirement_id>', methods=['DELETE'])
def remove_base_requirement(requirement_id):
    """
    Ruta para eliminar un requisito base por su ID.
    """
    # if not tiene_permiso_de_eliminar_requisito(requirement_id):
    #     abort(403, "No autorizado para eliminar este requisito.")

    try:
        deleted = delete_base_requirement(requirement_id)
        if not deleted:
            abort(404, description="Requisito no encontrado.")
        return jsonify({"message": "Requisito eliminado exitosamente."}), 200
    except Exception as e:
        abort(500, description=str(e)) 

-------------------------------------------------------------------------------------------- 

from database import get_db_connection

def get_requirements_by_variant(variant_id):
    """Obtiene todos los requisitos de una variante de evento."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT 
                    br.id, br.event_variant_id, br.required_role_id,
                    r.name as required_role_name, r.description as required_role_description
                FROM 
                    base_requirement br
                JOIN
                    role r ON br.required_role_id = r.id
                WHERE 
                    br.event_variant_id = %s;
            """, (variant_id,))
            requirements = cursor.fetchall()
            return [dict(row) for row in requirements]
    finally:
        conn.close()

def get_requirement_by_id(requirement_id):
    """Obtiene un requisito por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT 
                    br.id, br.event_variant_id, br.required_role_id,
                    r.name as required_role_name, r.description as required_role_description
                FROM 
                    base_requirement br
                JOIN
                    role r ON br.required_role_id = r.id
                WHERE 
                    br.id = %s;
            """, (requirement_id,))
            requirement = cursor.fetchone()
            return dict(requirement) if requirement else None
    finally:
        conn.close()

def create_base_requirement(event_variant_id, required_role_id):
    """Crea un nuevo requisito base para una variante de evento."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO base_requirement (event_variant_id, required_role_id)
                VALUES (%s, %s)
                RETURNING *;
                """,
                (event_variant_id, required_role_id)
            )
            new_requirement = cursor.fetchone()
            conn.commit()
            return dict(new_requirement)
    finally:
        conn.close()

def update_base_requirement(requirement_id, required_role_id=None):
    """Actualiza los datos de un requisito base."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            if required_role_id is None:
                return get_requirement_by_id(requirement_id)
                
            query = f"UPDATE base_requirement SET required_role_id = %s, updated_at = %s WHERE id = %s RETURNING *;"
            params = (required_role_id, datetime.now(), requirement_id)
            
            cursor.execute(query, params)
            updated_requirement = cursor.fetchone()
            conn.commit()
            return dict(updated_requirement) if updated_requirement else None
    finally:
        conn.close()

def delete_base_requirement(requirement_id):
    """Elimina un requisito base por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM base_requirement WHERE id = %s;", (requirement_id,))
            deleted_rows = cursor.rowcount
            conn.commit()
            return deleted_rows > 0
    finally:
        conn.close()