from .specific_schedule_controller import (
    get_schedules_by_parish,
    get_schedule_by_id,
    create_specific_schedule,
    update_specific_schedule,
    delete_specific_schedule
)

specific_schedule_bp = Blueprint('specific_schedule', __name__)

@specific_schedule_bp.route('/parish/<int:parish_id>', methods=['GET'])
def list_schedules_by_parish(parish_id):
    """
    Ruta para obtener todos los horarios específicos de una parroquia.
    """
    # if not tiene_permiso('ver_horarios', parish_id):
    #     abort(403, "No autorizado.")
    schedules = get_schedules_by_parish(parish_id)
    return jsonify(schedules), 200

@specific_schedule_bp.route('/<int:schedule_id>', methods=['GET'])
def get_single_schedule(schedule_id):
    """
    Ruta para obtener un horario específico por su ID.
    """
    schedule = get_schedule_by_id(schedule_id)
    if not schedule:
        abort(404, description="Horario de excepción no encontrado.")
    return jsonify(schedule), 200

@specific_schedule_bp.route('/', methods=['POST'])
def add_specific_schedule():
    """
    Ruta para crear un nuevo horario específico.
    """
    data = request.get_json()
    required_fields = ['parish_id', 'date', 'exception_type']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: parish_id, date y exception_type.")
    
    # if not es_admin_de_parroquia(data['parish_id']):
    #     abort(403, "No autorizado para agregar horarios a esta parroquia.")

    if data['exception_type'] not in ['OPEN', 'CLOSED']:
        abort(400, "El tipo de excepción debe ser 'OPEN' o 'CLOSED'.")

    if data['exception_type'] == 'OPEN' and (not data.get('start_time') or not data.get('end_time')):
        abort(400, "Para 'OPEN' se requieren start_time y end_time.")

    try:
        new_schedule = create_specific_schedule(
            parish_id=data['parish_id'],
            date=data['date'],
            start_time=data.get('start_time'),
            end_time=data.get('end_time'),
            exception_type=data['exception_type'],
            reason=data.get('reason')
        )
        return jsonify(new_schedule), 201
    except Exception as e:
        abort(500, description=str(e))

@specific_schedule_bp.route('/<int:schedule_id>', methods=['PUT'])
def edit_specific_schedule(schedule_id):
    """
    Ruta para actualizar un horario específico.
    """
    data = request.get_json()
    
    # if not tiene_permiso_de_editar_horario_especifico(schedule_id):
    #     abort(403, "No autorizado para editar este horario.")

    if data.get('exception_type') and data['exception_type'] not in ['OPEN', 'CLOSED']:
        abort(400, "El tipo de excepción debe ser 'OPEN' o 'CLOSED'.")

    try:
        updated_schedule = update_specific_schedule(
            schedule_id=schedule_id,
            date=data.get('date'),
            start_time=data.get('start_time'),
            end_time=data.get('end_time'),
            exception_type=data.get('exception_type'),
            reason=data.get('reason')
        )
        if not updated_schedule:
            abort(404, description="Horario de excepción no encontrado.")
        return jsonify(updated_schedule), 200
    except Exception as e:
        abort(500, description=str(e))

@specific_schedule_bp.route('/<int:schedule_id>', methods=['DELETE'])
def remove_specific_schedule(schedule_id):
    """
    Ruta para eliminar un horario específico por su ID.
    """
    # if not tiene_permiso_de_eliminar_horario_especifico(schedule_id):
    #     abort(403, "No autorizado para eliminar este horario.")

    try:
        deleted = delete_specific_schedule(schedule_id)
        if not deleted:
            abort(404, description="Horario de excepción no encontrado.")
        return jsonify({"message": "Horario de excepción eliminado exitosamente."}), 200
    except Exception as e:
        abort(500, description=str(e)) 

------------------------------------------------------------------------------------------------- 

from database import get_db_connection

def get_schedules_by_parish(parish_id):
    """Obtiene todos los horarios específicos de una parroquia."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM specific_schedule WHERE parish_id = %s ORDER BY date DESC;", (parish_id,))
            schedules = cursor.fetchall()
            return [dict(row) for row in schedules]
    finally:
        conn.close()

def get_schedule_by_id(schedule_id):
    """Obtiene un horario específico por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM specific_schedule WHERE id = %s;", (schedule_id,))
            schedule = cursor.fetchone()
            return dict(schedule) if schedule else None
    finally:
        conn.close()

def create_specific_schedule(parish_id, date, exception_type, start_time=None, end_time=None, reason=None):
    """Crea un nuevo horario específico (excepción)."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO specific_schedule (parish_id, date, start_time, end_time, exception_type, reason)
                VALUES (%s, %s, %s, %s, %s, %s)
                RETURNING *;
                """,
                (parish_id, date, start_time, end_time, exception_type, reason)
            )
            new_schedule = cursor.fetchone()
            conn.commit()
            return dict(new_schedule)
    finally:
        conn.close()

def update_specific_schedule(schedule_id, date=None, start_time=None, end_time=None, exception_type=None, reason=None):
    """Actualiza los datos de un horario específico."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            fields = []
            params = []

            if date is not None:
                fields.append("date = %s")
                params.append(date)
            if start_time is not None:
                fields.append("start_time = %s")
                params.append(start_time)
            if end_time is not None:
                fields.append("end_time = %s")
                params.append(end_time)
            if exception_type is not None:
                fields.append("exception_type = %s")
                params.append(exception_type)
            if reason is not None:
                fields.append("reason = %s")
                params.append(reason)
            
            if not fields:
                return get_schedule_by_id(schedule_id)
                
            query = f"UPDATE specific_schedule SET {', '.join(fields)}, updated_at = %s WHERE id = %s RETURNING *;"
            params.append(datetime.now())
            params.append(schedule_id)
            
            cursor.execute(query, tuple(params))
            updated_schedule = cursor.fetchone()
            conn.commit()
            return dict(updated_schedule) if updated_schedule else None
    finally:
        conn.close()

def delete_specific_schedule(schedule_id):
    """Elimina un horario específico por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM specific_schedule WHERE id = %s;", (schedule_id,))
            deleted_rows = cursor.rowcount
            conn.commit()
            return deleted_rows > 0
    finally:
        conn.close() 

