rom .role_controller import (
    get_roles_by_parish,
    get_role_by_id,
    create_role,
    update_role,
    deactivate_role
)

role_bp = Blueprint('role', __name__)

@role_bp.route('/parish/<int:parish_id>', methods=['GET'])
def list_roles_by_parish(parish_id):
    """
    Ruta para obtener todos los roles de una parroquia específica.
    """
    #if not tiene_permiso('listar_roles', parish_id):
    #    abort(403, "No autorizado.")
    roles = get_roles_by_parish(parish_id)
    return jsonify(roles), 200

@role_bp.route('/<int:role_id>', methods=['GET'])
def get_single_role(role_id):
    """
    Ruta para obtener un rol por su ID.
    """
    role = get_role_by_id(role_id)
    if not role:
        abort(404, description="Rol no encontrado.")
    #if not tiene_permiso_en_parroquia_de_rol(role_id):
    #    abort(403, "No autorizado.")
    return jsonify(role), 200

@role_bp.route('/', methods=['POST'])
def add_role():
    """
    Ruta para crear un nuevo rol.
    """
    data = request.get_json()
    required_fields = ['parish_id', 'name']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: parish_id y name.")
        
    #if not es_admin_de_parroquia(data['parish_id']):
    #    abort(403, "No autorizado para crear roles en esta parroquia.")

    try:
        new_role = create_role(
            parish_id=data['parish_id'],
            name=data['name'],
            description=data.get('description'),
            active=data.get('active', True)
        )
        return jsonify(new_role), 201
    except Exception as e:
        abort(500, description=str(e))

@role_bp.route('/<int:role_id>', methods=['PUT'])
def edit_role(role_id):
    """
    Ruta para actualizar un rol.
    """
    data = request.get_json()
    
    #if not es_admin_de_parroquia_de_rol(role_id):
    #    abort(403, "No autorizado para editar este rol.")

    try:
        updated_role = update_role(
            role_id=role_id,
            name=data.get('name'),
            description=data.get('description'),
            active=data.get('active')
        )
        if not updated_role:
            abort(404, description="Rol no encontrado.")
        return jsonify(updated_role), 200
    except Exception as e:
        abort(500, description=str(e))

@role_bp.route('/<int:role_id>/deactivate', methods=['PUT'])
def deactivate_role_route(role_id):
    """
    Ruta para desactivar un rol (soft delete).
    """
    #if not es_admin_de_parroquia_de_rol(role_id):
    #    abort(403, "No autorizado para desactivar este rol.")

    try:
        deactivated_role = deactivate_role(role_id)
        if not deactivated_role:
            abort(404, description="Rol no encontrado.")
        return jsonify(deactivated_role), 200
    except Exception as e:
        abort(500, description=str(e)) 


------------------------------------------------------------------------------------

from database import get_db_connection

def get_roles_by_parish(parish_id):
    """Obtiene todos los roles de una parroquia específica."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM role WHERE parish_id = %s ORDER BY name;", (parish_id,))
            roles = cursor.fetchall()
            return [dict(row) for row in roles]
    finally:
        conn.close()

def get_role_by_id(role_id):
    """Obtiene un rol por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM role WHERE id = %s;", (role_id,))
            role = cursor.fetchone()
            return dict(role) if role else None
    finally:
        conn.close()

def create_role(parish_id, name, description, active):
    """Crea un nuevo rol en la base de datos."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO role (parish_id, name, description, active)
                VALUES (%s, %s, %s, %s)
                RETURNING *;
                """,
                (parish_id, name, description, active)
            )
            new_role = cursor.fetchone()
            conn.commit()
            return dict(new_role)
    finally:
        conn.close()

def update_role(role_id, name=None, description=None, active=None):
    """Actualiza los datos de un rol."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            fields = []
            params = []
            
            if name is not None:
                fields.append("name = %s")
                params.append(name)
            if description is not None:
                fields.append("description = %s")
                params.append(description)
            if active is not None:
                fields.append("active = %s")
                params.append(active)
            
            if not fields:
                return get_role_by_id(role_id)
                
            query = f"UPDATE role SET {', '.join(fields)}, updated_at = %s WHERE id = %s RETURNING *;"
            params.append(datetime.now())
            params.append(role_id)
            
            cursor.execute(query, tuple(params))
            updated_role = cursor.fetchone()
            conn.commit()
            return dict(updated_role) if updated_role else None
    finally:
        conn.close()

def deactivate_role(role_id):
    """Desactiva un rol por su ID (soft delete)."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                "UPDATE role SET active = FALSE, updated_at = %s WHERE id = %s RETURNING *;",
                (datetime.now(), role_id)
            )
            deactivated_role = cursor.fetchone()
            conn.commit()
            return dict(deactivated_role) if deactivated_role else None
    finally:
        conn.close() 