from .event_variant_controller import (
    get_variants_by_event,
    get_variant_by_id,
    create_event_variant,
    update_event_variant,
    deactivate_event_variant
)

event_variant_bp = Blueprint('event_variant', __name__)

@event_variant_bp.route('/event/<int:event_id>', methods=['GET'])
def list_variants_by_event(event_id):
    """
    Ruta para obtener todas las variantes de un evento específico.
    """
    # if not tiene_permiso('ver_variantes_evento', event_id):
    #     abort(403, "No autorizado.")
    variants = get_variants_by_event(event_id)
    return jsonify(variants), 200

@event_variant_bp.route('/<int:variant_id>', methods=['GET'])
def get_single_variant(variant_id):
    """
    Ruta para obtener una variante de evento por su ID.
    """
    variant = get_variant_by_id(variant_id)
    if not variant:
        abort(404, description="Variante de evento no encontrada.")
    return jsonify(variant), 200

@event_variant_bp.route('/', methods=['POST'])
def add_event_variant():
    """
    Ruta para crear una nueva variante de evento.
    Requiere ser administrador del evento.
    """
    data = request.get_json()
    required_fields = ['event_id', 'name', 'max_capacity']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: event_id, name y max_capacity.")

    # if not es_admin_de_evento(data['event_id']):
    #     abort(403, "No autorizado para crear variantes para este evento.")
    
    try:
        new_variant = create_event_variant(
            event_id=data['event_id'],
            name=data['name'],
            description=data.get('description'),
            current_price=data.get('current_price'),
            max_capacity=data['max_capacity'],
            requires_preparation=data.get('requires_preparation', False),
            preparation_time=data.get('preparation_time')
        )
        return jsonify(new_variant), 201
    except Exception as e:
        abort(500, description=str(e))

@event_variant_bp.route('/<int:variant_id>', methods=['PUT'])
def edit_event_variant(variant_id):
    """
    Ruta para actualizar los datos de una variante de evento.
    Requiere ser administrador del evento.
    """
    data = request.get_json()
    
    # if not es_admin_de_variante_de_evento(variant_id):
    #     abort(403, "No autorizado para editar esta variante.")
        
    try:
        updated_variant = update_event_variant(
            variant_id=variant_id,
            name=data.get('name'),
            description=data.get('description'),
            current_price=data.get('current_price'),
            max_capacity=data.get('max_capacity'),
            requires_preparation=data.get('requires_preparation'),
            preparation_time=data.get('preparation_time'),
            active=data.get('active')
        )
        if not updated_variant:
            abort(404, description="Variante de evento no encontrada.")
        return jsonify(updated_variant), 200
    except Exception as e:
        abort(500, description=str(e))

@event_variant_bp.route('/<int:variant_id>/deactivate', methods=['PUT'])
def deactivate_event_variant_route(variant_id):
    """
    Ruta para desactivar una variante de evento (borrado lógico).
    """
    # if not es_admin_de_variante_de_evento(variant_id):
    #     abort(403, "No autorizado.")
    try:
        deactivated_variant = deactivate_event_variant(variant_id)
        if not deactivated_variant:
            abort(404, description="Variante de evento no encontrada.")
        return jsonify(deactivated_variant), 200
    except Exception as e:
        abort(500, description=str(e)) 

----------------------------------------------------------------------------------------- 

from database import get_db_connection

def get_variants_by_event(event_id):
    """Obtiene todas las variantes de un evento específico."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM event_variant WHERE event_id = %s ORDER BY name;", (event_id,))
            variants = cursor.fetchall()
            return [dict(row) for row in variants]
    finally:
        conn.close()

def get_variant_by_id(variant_id):
    """Obtiene una variante de evento por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("SELECT * FROM event_variant WHERE id = %s;", (variant_id,))
            variant = cursor.fetchone()
            return dict(variant) if variant else None
    finally:
        conn.close()

def create_event_variant(event_id, name, description, current_price, max_capacity, requires_preparation, preparation_time):
    """Crea una nueva variante de evento."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO event_variant (event_id, name, description, current_price, max_capacity, requires_preparation, preparation_time)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                RETURNING *;
                """,
                (event_id, name, description, current_price, max_capacity, requires_preparation, preparation_time)
            )
            new_variant = cursor.fetchone()
            conn.commit()
            return dict(new_variant)
    finally:
        conn.close()

def update_event_variant(variant_id, name=None, description=None, current_price=None, max_capacity=None, requires_preparation=None, preparation_time=None, active=None):
    """Actualiza los datos de una variante de evento."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            fields = []
            params = []
            
            if name is not None:
                fields.append("name = %s")
                params.append(name)
            if description is not None:
                fields.append("description = %s")
                params.append(description)
            if current_price is not None:
                fields.append("current_price = %s")
                params.append(current_price)
            if max_capacity is not None:
                fields.append("max_capacity = %s")
                params.append(max_capacity)
            if requires_preparation is not None:
                fields.append("requires_preparation = %s")
                params.append(requires_preparation)
            if preparation_time is not None:
                fields.append("preparation_time = %s")
                params.append(preparation_time)
            if active is not None:
                fields.append("active = %s")
                params.append(active)
            
            if not fields:
                return get_variant_by_id(variant_id)
                
            query = f"UPDATE event_variant SET {', '.join(fields)}, updated_at = %s WHERE id = %s RETURNING *;"
            params.append(datetime.now())
            params.append(variant_id)
            
            cursor.execute(query, tuple(params))
            updated_variant = cursor.fetchone()
            conn.commit()
            return dict(updated_variant) if updated_variant else None
    finally:
        conn.close()

def deactivate_event_variant(variant_id):
    """Desactiva una variante de evento por su ID (borrado lógico)."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                "UPDATE event_variant SET active = FALSE, updated_at = %s WHERE id = %s RETURNING *;",
                (datetime.now(), variant_id)
            )
            deactivated_variant = cursor.fetchone()
            conn.commit()
            return dict(deactivated_variant) if deactivated_variant else None
    finally:
        conn.close() 

        