Aquí tienes el CRUD completo para la tabla ReservationRequirement, que permite agregar requisitos adicionales (como el rol de un usuario) para una reserva específica.

Rutas para ReservationRequirement
Este archivo (reservation_requirement_routes.py) define los endpoints para la gestión de los requisitos de una reserva. Las rutas están anidadas bajo un reservation_id para reflejar su dependencia.

Python

# reservation_requirement_routes.py

from flask import Blueprint, jsonify, request, abort
from .reservation_requirement_controller import (
    get_requirements_by_reservation,
    get_requirement_by_id,
    create_reservation_requirement,
    update_reservation_requirement,
    delete_reservation_requirement
)

reservation_requirement_bp = Blueprint('reservation_requirement', __name__)

@reservation_requirement_bp.route('/reservation/<int:reservation_id>', methods=['GET'])
def list_requirements_by_reservation(reservation_id):
    """
    Ruta para obtener todos los requisitos de una reserva específica.
    """
    # if not tiene_permiso('ver_requisitos_reserva', reservation_id):
    #     abort(403, "No autorizado.")
    requirements = get_requirements_by_reservation(reservation_id)
    return jsonify(requirements), 200

@reservation_requirement_bp.route('/<int:requirement_id>', methods=['GET'])
def get_single_requirement(requirement_id):
    """
    Ruta para obtener un requisito de reserva por su ID.
    """
    requirement = get_requirement_by_id(requirement_id)
    if not requirement:
        abort(404, description="Requisito de reserva no encontrado.")
    return jsonify(requirement), 200

@reservation_requirement_bp.route('/', methods=['POST'])
def add_reservation_requirement():
    """
    Ruta para crear un nuevo requisito para una reserva.
    """
    data = request.get_json()
    required_fields = ['reservation_id', 'required_role_id']
    if not all(field in data for field in required_fields):
        abort(400, "Faltan campos obligatorios: reservation_id y required_role_id.")
    
    # if not es_admin_de_reserva(data['reservation_id']):
    #     abort(403, "No autorizado para agregar requisitos a esta reserva.")

    try:
        new_requirement = create_reservation_requirement(
            reservation_id=data['reservation_id'],
            required_role_id=data['required_role_id'],
            satisfied=data.get('satisfied', False)
        )
        return jsonify(new_requirement), 201
    except Exception as e:
        abort(500, description=str(e))

@reservation_requirement_bp.route('/<int:requirement_id>', methods=['PUT'])
def edit_reservation_requirement(requirement_id):
    """
    Ruta para actualizar un requisito de reserva.
    """
    data = request.get_json()
    
    # if not tiene_permiso_de_editar_requisito_reserva(requirement_id):
    #     abort(403, "No autorizado para editar este requisito.")

    try:
        updated_requirement = update_reservation_requirement(
            requirement_id=requirement_id,
            satisfied=data.get('satisfied')
        )
        if not updated_requirement:
            abort(404, description="Requisito de reserva no encontrado.")
        return jsonify(updated_requirement), 200
    except Exception as e:
        abort(500, description=str(e))

@reservation_requirement_bp.route('/<int:requirement_id>', methods=['DELETE'])
def remove_reservation_requirement(requirement_id):
    """
    Ruta para eliminar un requisito de reserva por su ID.
    """
    # if not tiene_permiso_de_eliminar_requisito_reserva(requirement_id):
    #     abort(403, "No autorizado para eliminar este requisito.")

    try:
        deleted = delete_reservation_requirement(requirement_id)
        if not deleted:
            abort(404, description="Requisito de reserva no encontrado.")
        return jsonify({"message": "Requisito de reserva eliminado exitosamente."}), 200
    except Exception as e:
        abort(500, description=str(e)) 


--------------------------------------------------------------------------------------------------------

from database import get_db_connection

def get_requirements_by_reservation(reservation_id):
    """Obtiene todos los requisitos de una reserva específica."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT 
                    rr.id, rr.reservation_id, rr.required_role_id, rr.satisfied,
                    r.name as required_role_name, r.description as required_role_description
                FROM 
                    reservation_requirement rr
                JOIN
                    role r ON rr.required_role_id = r.id
                WHERE 
                    rr.reservation_id = %s;
            """, (reservation_id,))
            requirements = cursor.fetchall()
            return [dict(row) for row in requirements]
    finally:
        conn.close()

def get_requirement_by_id(requirement_id):
    """Obtiene un requisito de reserva por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT 
                    rr.id, rr.reservation_id, rr.required_role_id, rr.satisfied,
                    r.name as required_role_name, r.description as required_role_description
                FROM 
                    reservation_requirement rr
                JOIN
                    role r ON rr.required_role_id = r.id
                WHERE 
                    rr.id = %s;
            """, (requirement_id,))
            requirement = cursor.fetchone()
            return dict(requirement) if requirement else None
    finally:
        conn.close()

def create_reservation_requirement(reservation_id, required_role_id, satisfied):
    """Crea un nuevo requisito para una reserva."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            cursor.execute(
                """
                INSERT INTO reservation_requirement (reservation_id, required_role_id, satisfied)
                VALUES (%s, %s, %s)
                RETURNING *;
                """,
                (reservation_id, required_role_id, satisfied)
            )
            new_requirement = cursor.fetchone()
            conn.commit()
            return dict(new_requirement)
    finally:
        conn.close()

def update_reservation_requirement(requirement_id, satisfied=None):
    """Actualiza el estado de un requisito de reserva."""
    conn = get_db_connection()
    try:
        with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
            if satisfied is None:
                return get_requirement_by_id(requirement_id)
                
            query = f"UPDATE reservation_requirement SET satisfied = %s, updated_at = %s WHERE id = %s RETURNING *;"
            params = (satisfied, datetime.now(), requirement_id)
            
            cursor.execute(query, params)
            updated_requirement = cursor.fetchone()
            conn.commit()
            return dict(updated_requirement) if updated_requirement else None
    finally:
        conn.close()

def delete_reservation_requirement(requirement_id):
    """Elimina un requisito de reserva por su ID."""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM reservation_requirement WHERE id = %s;", (requirement_id,))
            deleted_rows = cursor.rowcount
            conn.commit()
            return deleted_rows > 0
    finally:
        conn.close() 

